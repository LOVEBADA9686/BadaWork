/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-09-06 09:14:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cgiTest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.ArrayList;

public final class testJsp_005f1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/cgiTest/testJsp.jsp", Long.valueOf(1630893324406L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("page : page 디렉티브 \r\n");
      out.write("language=\"java\" : 이 페이지에서 사용하는 언어는 자바 입니다 . 생략 가능 \r\n");
      out.write("\r\n");
      out.write("contentType : 현재 jsp 문서의 문서형태(문서포맷)와 인코딩 설정\r\n");
      out.write("\r\n");
      out.write("text/html : MIME : 이 현재 페이지는 html 형식을 하고 있다. \r\n");
      out.write("	MIME : Multipurose Internet Mail Extensions : 전자우편을 위한 인터넷 표준 포맷. \r\n");
      out.write("			파일의 포맷 및 인코딩 설정 표시 \r\n");
      out.write("charset=\"EUC-KR\" : 현재 jsp 페이지의 인코딩이 EUC-KR 이다. \r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("<!-- jsp 파일에 객체를 불러오기 (import 하기 ) -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<!-- \r\n");
      out.write("	이 페이지의 html의 인코딩이 EUC-KR 이다. \r\n");
      out.write(" -->\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>jsp 태그들 </title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>JSP 태그(요소, 엘리먼트) 사용법</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<!-- 스크립틀릿 요소(태그, 엘리먼트) -->\r\n");

	out.println("요기는 스크립틀릿 영역이다. <br>");
	out.println("자바 코드를 구현하면 된다. <br>");
	out.println("1. jsp 내장형 오브젝트  : request, response <br>");
	out.println("2. Servlet 코드 <br>");
	out.println("3. java 코드 <br>");
	out.println("4. 프로그램 실행 결과만 클라이언트로 응답한다. <br>");
	
	out.println(new Date() + "<br>");

      out.write("\r\n");
      out.write("<!-- 표현식 요소(태그, 엘리먼트) -->\r\n");
      out.print( "요기는 표현식 영역이다." );
      out.write("<br>\r\n");
      out.print( "하는 역활은 브라우저에 출력을 담당한다." );
      out.write("<br>\r\n");
      out.print( "스크립틀릿 영역에서 사용하는 out.println() 과 같은 기능이다." );
      out.write("<br>\r\n");
      out.print( new Date() );
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("<!-- 인쿨르드 디렉티브 요소(태그, 엘리먼트), 파일을 불러오기 : 정적인 기능 -->\r\n");
      out.write("<!-- 메인페이지 footer 용도로 사용한다.  -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \r\n");
      out.write("          \"-//W3C//DTD HTML 4.01 Transitional//EN\" \r\n");
      out.write("          \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("Hello JSP !!!<br>\r\n");
      out.write("<hr>\r\n");

	out.println("스크립틀릿 태그 !!!" + "<br>" );
	out.println("이 부분은 서버사이드 스크립트 영역으로 웹브라우저에서 읽어 줄 수 없다." + "<br>" );
	out.println("서버에서 결과를 만들어서 웹브라우저에 전달된 내용만 읽어준다." + "<br>" );

      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("</body>\r\n");
      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");
      out.write("<root>\r\n");
      out.write("<test>test</test>\r\n");
      out.write("</root>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
